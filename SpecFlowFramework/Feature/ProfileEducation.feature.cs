// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowFramework.Feature
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ProfileEducation")]
    public partial class ProfileEducationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "ProfileEducation.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ProfileEducation", "\tIn order to update my profile \r\n\tAs a skill trader\r\n\tI can add,delete and edit E" +
                    "ducation in my profile ", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("as seller I should able to add Education")]
        [NUnit.Framework.CategoryAttribute("automate")]
        public virtual void AsSellerIShouldAbleToAddEducation()
        {
            string[] tagsOfScenario = new string[] {
                    "automate"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("as seller I should able to add Education", null, new string[] {
                        "automate"});
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table11.AddRow(new string[] {
                            "Myra.bamania@gmail.com",
                            "123456"});
#line 9
 testRunner.Given("I login with valid user", ((string)(null)), table11, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "University",
                            "Country",
                            "Title",
                            "Degree",
                            "GraduationYear"});
                table12.AddRow(new string[] {
                            "Auckland Univercity",
                            "New Zealand",
                            "B.Tech",
                            "Bachlor",
                            "2005"});
#line 12
 testRunner.And("I can add this education", ((string)(null)), table12, "And ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "University",
                            "Country",
                            "Title",
                            "Degree",
                            "GraduationYear"});
                table13.AddRow(new string[] {
                            "Auckland Univercity",
                            "New Zealand",
                            "B.Tech",
                            "Bachlor",
                            "2005"});
#line 15
 testRunner.Then("I can see added education", ((string)(null)), table13, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("as seller I should able to delete Education")]
        [NUnit.Framework.CategoryAttribute("automate")]
        public virtual void AsSellerIShouldAbleToDeleteEducation()
        {
            string[] tagsOfScenario = new string[] {
                    "automate"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("as seller I should able to delete Education", null, new string[] {
                        "automate"});
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table14.AddRow(new string[] {
                            "Myra.bamania@gmail.com",
                            "123456"});
#line 21
 testRunner.Given("I login with valid user", ((string)(null)), table14, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "University",
                            "Country",
                            "Title",
                            "Degree",
                            "GraduationYear"});
                table15.AddRow(new string[] {
                            "Auckland Univercity",
                            "New Zealand",
                            "B.Tech",
                            "Bachlor",
                            "2005"});
#line 24
 testRunner.And("I can delete this education", ((string)(null)), table15, "And ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "University",
                            "Country",
                            "Title",
                            "Degree",
                            "GraduationYear"});
                table16.AddRow(new string[] {
                            "Auckland Univercity",
                            "New Zealand",
                            "B.Tech",
                            "Bachlor",
                            "2005"});
#line 27
 testRunner.Then("I cannot see deleted education", ((string)(null)), table16, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("as seller I should able to edit Education")]
        [NUnit.Framework.CategoryAttribute("automate")]
        public virtual void AsSellerIShouldAbleToEditEducation()
        {
            string[] tagsOfScenario = new string[] {
                    "automate"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("as seller I should able to edit Education", null, new string[] {
                        "automate"});
#line 32
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table17.AddRow(new string[] {
                            "Myra.bamania@gmail.com",
                            "123456"});
#line 33
 testRunner.Given("I login with valid user", ((string)(null)), table17, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "University",
                            "Country",
                            "Title",
                            "Degree",
                            "GraduationYear",
                            "NewUniversity",
                            "NewCountry",
                            "NewTitle",
                            "NewDegree",
                            "NewGraduationYear"});
                table18.AddRow(new string[] {
                            "Auckland Univercity",
                            "New Zealand",
                            "B.Tech",
                            "Bachlor",
                            "2005",
                            "Waikato",
                            "New Zealand",
                            "B.Sc",
                            "Master",
                            "2008"});
#line 36
 testRunner.And("I can edit this education", ((string)(null)), table18, "And ");
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "University",
                            "Country",
                            "Title",
                            "Degree",
                            "GraduationYear",
                            "NewUniversity",
                            "NewCountry",
                            "NewTitle",
                            "NewDegree",
                            "NewGraduationYear"});
                table19.AddRow(new string[] {
                            "Auckland Univercity",
                            "New Zealand",
                            "B.Tech",
                            "Bachlor",
                            "2005",
                            "Waikato",
                            "New Zealand",
                            "B.Sc",
                            "Master",
                            "2008"});
#line 39
 testRunner.Then("I can see edited education", ((string)(null)), table19, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
